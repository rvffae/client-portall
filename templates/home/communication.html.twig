{% extends 'base.html.twig' %}

{% block title %}Messagerie{% endblock %}

{% block javascripts %}
    {{ parent() }}
    {% block communication_scripts %}
        <script>
            class CommunicationManager {
                constructor() {
                    this.isAuthenticated = {{ authenticated|default(false) ? 'true' : 'false' }};
                    this.refreshIntervals = {};
                    this.init();
                }

                init() {
                    this.bindEvents();
                    if (this.isAuthenticated) {
                        this.startAutoRefresh();
                        this.updateStatus();
                    }
                    this.animateElements();
                }

                bindEvents() {
                    document.addEventListener('click', (e) => {
                        if (e.target.classList.contains('communication-section-refresh')) {
                            const section = e.target.getAttribute('data-section');
                            this.refreshSection(section);
                        }
                    });

                    document.addEventListener('click', (e) => {
                        if (e.target.closest('.communication-message-item')) {
                            const messageItem = e.target.closest('.communication-message-item');
                            this.handleMessageClick(messageItem);
                        }
                    });
                }

                async refreshSection(section) {
                    const sectionElement = document.querySelector(`[data-section="${section}"]`).closest('.communication-section');
                    const contentElement = sectionElement.querySelector('.communication-section-content');
                    const refreshBtn = sectionElement.querySelector('.communication-section-refresh');
                    refreshBtn.style.transform = 'rotate(360deg)';
                    contentElement.innerHTML = this.getLoadingHTML();

                    try {
                        let endpoint = '';
                        switch(section) {
                            case 'gmail':
                                endpoint = '{{ path("communication_emails") }}';
                                break;
                            case 'chat':
                                endpoint = '{{ path("communication_chat_messages") }}';
                                break;
                        }

                        const response = await fetch(endpoint);
                        const data = await response.json();

                        if (data.success) {
                            if (section === 'gmail') {
                                this.renderEmails(data.emails, contentElement);
                            } else if (section === 'chat') {
                                this.renderChatMessages(data.messages, contentElement);
                            }
                        } else {
                            contentElement.innerHTML = this.getErrorHTML('Erreur lors du chargement');
                        }
                    } catch (error) {
                        console.error('Erreur:', error);
                        contentElement.innerHTML = this.getErrorHTML('Erreur de connexion');
                    }

                    setTimeout(() => {
                        refreshBtn.style.transform = '';
                    }, 500);
                }

                renderEmails(emails, container) {
                    if (!emails || emails.length === 0) {
                        container.innerHTML = this.getEmptyHTML('üìß', 'Aucun email trouv√©');
                        return;
                    }

                    const emailsHTML = emails.map(email => `
                        <div class="communication-message-item" data-type="email" data-id="${email.id}">
                            <div class="communication-message-header">
                                <div class="communication-message-from">${this.escapeHtml(email.from)}</div>
                                <div class="communication-message-date">${this.formatDate(email.date)}</div>
                            </div>
                            <div class="communication-message-subject">${this.escapeHtml(email.subject)}</div>
                            <div class="communication-message-snippet">${this.escapeHtml(email.snippet)}</div>
                        </div>
                    `).join('');

                    container.innerHTML = emailsHTML;
                }

                renderChatMessages(messages, container) {
                    if (!messages || messages.length === 0) {
                        container.innerHTML = this.getEmptyHTML('üí¨', 'Aucun message de chat trouv√©');
                        return;
                    }

                    const messagesHTML = messages.map(message => `
                        <div class="communication-message-item" data-type="chat" data-id="${message.id}">
                            <div class="communication-message-header">
                                <div class="communication-message-from">${this.escapeHtml(message.sender)}</div>
                                <div class="communication-message-date">${this.formatDate(message.createTime)}</div>
                            </div>
                            <div class="communication-message-subject">üìç ${this.escapeHtml(message.space)}</div>
                            <div class="communication-message-snippet">${this.escapeHtml(message.text)}</div>
                        </div>
                    `).join('');

                    container.innerHTML = messagesHTML;
                }

                async updateStatus() {
                    try {
                        const response = await fetch('{{ path("communication_status") }}');
                        const data = await response.json();
                        const emailResponse = await fetch('{{ path("communication_emails") }}');
                        const emailData = await emailResponse.json();
                        const chatResponse = await fetch('{{ path("communication_chat_messages") }}');
                        const chatData = await chatResponse.json();
                        if (emailData.success) {
                            this.updateCounter('gmail', emailData.emails.length);
                        }
                        if (chatData.success) {
                            this.updateCounter('chat', chatData.messages.length);
                        }
                    } catch (error) {
                        console.error('Erreur lors de la mise √† jour du statut:', error);
                    }
                }

                updateCounter(type, count) {
                    const counterElement = document.querySelector(`[data-counter="${type}"]`);
                    if (counterElement) {
                        counterElement.textContent = count;
                        counterElement.style.transform = 'scale(1.2)';
                        setTimeout(() => {
                            counterElement.style.transform = '';
                        }, 300);
                    }
                }

                startAutoRefresh() {
                    this.refreshIntervals.main = setInterval(() => {
                        this.refreshSection('gmail');
                        this.refreshSection('chat');
                        this.updateStatus();
                    }, 300000);
                }

                handleMessageClick(messageItem) {
                    messageItem.style.transform = 'scale(0.98)';
                    setTimeout(() => {
                        messageItem.style.transform = '';
                    }, 150);

                    const type = messageItem.getAttribute('data-type');
                    const id = messageItem.getAttribute('data-id');
                    console.log(`Clic sur ${type} avec ID: ${id}`);
                }

                animateElements() {
                    const elements = document.querySelectorAll('.communication-section, .communication-status-card');
                    elements.forEach((element, index) => {
                        element.style.opacity = '0';
                        element.style.transform = 'translateY(20px)';
                        setTimeout(() => {
                            element.style.transition = 'all 0.6s ease';
                            element.style.opacity = '1';
                            element.style.transform = 'translateY(0)';
                        }, index * 100);
                    });
                }

                getLoadingHTML() {
                    return `
                        <div class="communication-loading">
                            <div class="communication-loading-icon">‚ü≥</div>
                            <div>Chargement...</div>
                        </div>
                    `;
                }

                getEmptyHTML(icon, message) {
                    return `
                        <div class="communication-empty">
                            <div class="communication-empty-icon">${icon}</div>
                            <div>${message}</div>
                        </div>
                    `;
                }

                getErrorHTML(message) {
                    return `
                        <div class="communication-empty">
                            <div class="communication-empty-icon">‚ö†Ô∏è</div>
                            <div>${message}</div>
                        </div>
                    `;
                }

                escapeHtml(text) {
                    if (!text) return '';
                    const div = document.createElement('div');
                    div.textContent = text;
                    return div.innerHTML;
                }

                formatDate(dateString) {
                    if (!dateString) return '';
                    try {
                        const date = new Date(dateString);
                        return date.toLocaleDateString('fr-FR', {
                            day: '2-digit',
                            month: '2-digit',
                            year: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                        });
                    } catch (error) {
                        return dateString;
                    }
                }

                destroy() {
                    Object.values(this.refreshIntervals).forEach(interval => {
                        clearInterval(interval);
                    });
                }
            }

            document.addEventListener('DOMContentLoaded', () => {
                window.communicationManager = new CommunicationManager();
            });

            window.addEventListener('beforeunload', () => {
                if (window.communicationManager) {
                    window.communicationManager.destroy();
                }
            });
        </script>
    {% endblock %}
{% endblock %}

{% block body %}

    <!-- Navigation principale -->
    <nav class="communication-sidebar">
        <div class="communication-nav-header">
            <h2 class="communication-nav-title">Menu</h2>
        </div>
        <ul class="communication-nav-menu">
            <li class="communication-nav-item">
                <a href="{{ path('dashboard') }}" class="communication-nav-link">
                    <span class="communication-nav-icon">{{ ux_icon('ph:chart-pie') }}</span>
                    <span class="communication-nav-text">Tableau de bord</span>
                </a>
            </li>
            <li class="communication-nav-item">
                <a href="{{ path('communication_index') }}" class="communication-nav-link">
                    <span class="communication-nav-icon">{{ ux_icon('ph:envelope') }}</span>
                    <span class="communication-nav-text">Messagerie</span>
                </a>
            </li>
            <li class="communication-nav-item">
                <a href="#" class="communication-nav-link">
                    <span class="communication-nav-icon">{{ ux_icon('ph:package') }}</span>
                    <span class="communication-nav-text">Produit</span>
                </a>
            </li>
            <li class="communication-nav-item">
                <a href="#" class="communication-nav-link">
                    <span class="communication-nav-icon">{{ ux_icon('ph:users') }}</span>
                    <span class="communication-nav-text">Clients</span>
                </a>
            </li>
            <li class="communication-nav-item">
                <a href="#" class="communication-nav-link">
                    <span class="communication-nav-icon">{{ ux_icon('ph:buildings') }}</span>
                    <span class="communication-nav-text">Entreprises</span>
                </a>
            </li>
            <li class="communication-nav-item">
                <a href="#" class="communication-nav-link">
                    <span class="communication-nav-icon">{{ ux_icon('ph:chart-line') }}</span>
                    <span class="communication-nav-text">Statistiques</span>
                </a>
            </li>
            <li class="communication-nav-item">
                <a href="#" class="communication-nav-link">
                    <span class="communication-nav-icon">{{ ux_icon('ph:device-mobile') }}</span>
                    <span class="communication-nav-text">Applications</span>
                </a>
            </li>
            <li class="communication-nav-item">
                <a href="#" class="communication-nav-link">
                    <span class="communication-nav-icon">{{ ux_icon('ph:gear') }}</span>
                    <span class="communication-nav-text">Param√®tres</span>
                </a>
            </li>
        </ul>
    </nav>


<div class="communication-container communication-fade-in">
    <div class="communication-header">
        <h1 class="communication-title">
            <span class="communication-title-icon">üì®</span>
            Messagerie
        </h1>
        <p class="communication-subtitle">G√©rez Gmail et Google Chat</p>
    </div>

    {% if not authenticated %}
        <div class="communication-auth-section">
            <div class="communication-auth-icon">üîí</div>
            <h2 class="communication-auth-title">Connexion requise</h2>
            <p class="communication-auth-description">
                Connectez-vous √† votre compte Google pour acc√©der √† vos emails Gmail et messages Google Chat.
                Vos donn√©es restent s√©curis√©es et priv√©es.
            </p>
            <a href="{{ path('communication_auth') }}" class="communication-auth-btn">
                <span class="communication-auth-btn-icon"></span>
                Se connecter avec Google
            </a>
        </div>
    {% else %}
        <div class="communication-status-section">
            <div class="communication-status-card">
                <div class="communication-status-header">
                    <div class="communication-status-icon communication-status-icon-gmail">üì•</div>
                    <div>
                        <h3 class="communication-status-title">Gmail</h3>
                        <div class="communication-status-count" data-counter="gmail">{{ emails|length }}</div>
                        <div class="communication-status-label">Messages</div>
                    </div>
                </div>
            </div>
            <div class="communication-status-card">
                <div class="communication-status-header">
                    <div class="communication-status-icon communication-status-icon-chat">üí¨</div>
                    <div>
                        <h3 class="communication-status-title">Google Chat</h3>
                        <div class="communication-status-count" data-counter="chat">{{ chatMessages|length }}</div>
                        <div class="communication-status-label">Messages</div>
                    </div>
                </div>
            </div>
        </div>

        <div class="communication-content-grid">
            <!-- Section Gmail -->
            <div class="communication-section">
                <div class="communication-section-header">
                    <h2 class="communication-section-title">
                        <span class="communication-section-icon">üì•</span>
                        Emails Gmail
                    </h2>
                    <button class="communication-section-refresh" data-section="gmail" title="Actualiser">‚ü≥</button>
                </div>
                <div class="communication-section-content">
                    {% if emails is empty %}
                        <div class="communication-empty">
                            <div class="communication-empty-icon">üìß</div>
                            <div>Aucun email trouv√©</div>
                        </div>
                    {% else %}
                        {% for email in emails %}
                            <div class="communication-message-item" data-type="email" data-id="{{ email.id }}">
                                <div class="communication-message-header">
                                    <div class="communication-message-from">{{ email.from }}</div>
                                    <div class="communication-message-date">{{ email.date|date('d/m/Y H:i') }}</div>
                                </div>
                                <div class="communication-message-subject">{{ email.subject }}</div>
                                <div class="communication-message-snippet">{{ email.snippet }}</div>
                            </div>
                        {% endfor %}
                    {% endif %}
                </div>
            </div>

            <!-- Section Google Chat -->
            <div class="communication-section">
                <div class="communication-section-header">
                    <h2 class="communication-section-title">
                        <span class="communication-section-icon">üí¨</span>
                        Google Chat
                    </h2>
                    <button class="communication-section-refresh" data-section="chat" title="Actualiser">‚ü≥</button>
                </div>
                <div class="communication-section-content">
                    {% if chatMessages is empty %}
                        <div class="communication-empty">
                            <div class="communication-empty-icon">üí¨</div>
                            <div>Aucun message de chat trouv√©</div>
                        </div>
                    {% else %}
                        {% for message in chatMessages %}
                            <div class="communication-message-item" data-type="chat" data-id="{{ message.id }}">
                                <div class="communication-message-header">
                                    <div class="communication-message-from">{{ message.sender }}</div>
                                    <div class="communication-message-date">{{ message.createTime|date('d/m/Y H:i') }}</div>
                                </div>
                                <div class="communication-message-subject">üìç {{ message.space }}</div>
                                <div class="communication-message-snippet">{{ message.text }}</div>
                            </div>
                        {% endfor %}
                    {% endif %}
                </div>
            </div>
        </div>

        <div class="communication-actions">
            <a href="{{ path('communication_disconnect') }}" class="communication-btn communication-btn-disconnect">
                <span>üîì</span>
                Se d√©connecter
            </a>
        </div>
    {% endif %}
</div>
{% endblock %}
